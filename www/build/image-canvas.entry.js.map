{"file":"image-canvas.entry.esm.js","mappings":"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","names":[],"sources":["src/components/image-canvas/image-canvas.css?tag=image-canvas","src/components/image-canvas/image-canvas.tsx"],"sourcesContent":[":host {\n  display: block;\n}","import { Component, Prop,State, Element } from '@stencil/core';\nimport { ContentDataImg, ContentDataText } from '../type';\n\n@Component({\n  tag: 'image-canvas',\n  styleUrl: 'image-canvas.css',\n})\nexport class ImageCanvas {\n\n  @Element() el: HTMLElement\n\n  @Prop() idCanvas: string\n  /**\n   * With\n   */\n  @Prop() wCanvas: number\n\n  /**\n   * Height\n   */\n  @Prop() hCanvas: number\n\n  /**\n   * With css en cm\n   */\n  @Prop() wCanvasCss: number = undefined\n\n  /**\n   * Height css en cm\n   */\n  @Prop() hCanvasCss: number = undefined\n\n  /**\n   * With\n   */\n  @Prop() wImageBg: number = 0\n\n  /**\n   * Height\n   */\n  @Prop() hImageBg: number = 0\n\n\n  /**\n   * Canvas fillStroke\n   */\n  @Prop() canvasFillStyle: string = 'black'\n\n  /**\n   * canvas.font  string style\n   */\n\n\n  @Prop() fontCanvas:string = 'bold 12p Arial'\n  \n  \n  /**\n   * canvas.content \n   */\n  @Prop() content: ContentDataText[]|ContentDataImg[]\n\n  @State() imgLoading = true;\n\n  private canvas: HTMLCanvasElement\n  private centerText: string = 'start'\n\n  componentWillLoad(){\n    if( this.content[0]['type'] != 'image'){\n      console.error('el primer valor del array tiene que ser de type image')\n      return\n    }\n    this.canvas = this.__createCanvas();\n    this.el.appendChild(this.canvas)\n    const img = new Image();\n    img.addEventListener('load', () =>  {\n      this.imgLoading = false\n      const ctx = this.canvas.getContext('2d');\n      /*var anchoImgBg = \n      var altoImgBg  = */\n      ctx.drawImage(img, 0, 0,this.content[0]['width'],this.content[0]['height']);\n      this.__loadData() \n    })\n    img.src = this.content[0]['any_string'];\n\n    \n  }\n\n  /*descargar(){\n   // Espera al próximo ciclo de renderización antes de realizar la descarga\n    const canvasPuntual = document.getElementById('sarasa') as HTMLCanvasElement;\n    console.info('canvasPuntual', canvasPuntual);\n\n    // Convierte la URL de datos en un Blob\n    const dataUrl = canvasPuntual.toDataURL(\"image/png\");\n    console.info('dataUrl', dataUrl);\n    const blob = this.dataURItoBlob(dataUrl);\n\n    // Crea una URL a partir del Blob\n    const blobUrl = URL.createObjectURL(blob);\n    console.info('blobUrl', blobUrl);\n    // Crea un enlace de descarga automática\n    const downloadLink = document.createElement('a');\n    downloadLink.href = blobUrl;\n    downloadLink.download = 'imagen.png'; // Cambia 'imagen.png' por el nombre que desees para el archivo descargado\n\n    // Simula un clic en el enlace para iniciar la descarga\n    downloadLink.click();\n\n    // Libera la URL del Blob después de la descarga\n    URL.revokeObjectURL(blobUrl);\n  }\n\n  dataURItoBlob(dataURI) {\n    const byteString = atob(dataURI.split(',')[1]);\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], { type: mimeString });\n  }*/\n\n\n  __createCanvas() {\n    const canvas = document.createElement('canvas')\n    canvas.id = this.idCanvas\n    if( this.wCanvasCss != undefined ){\n      canvas.style.width = this.wCanvasCss+\"cm\"\n    }\n    if( this.hCanvasCss != undefined ){\n      canvas.style.height = this.hCanvasCss+'cm'\n    }\n    canvas.height = this.hCanvas\n    canvas.width = this.wCanvas\n    return canvas\n  }\n\n  __loadData() {\n       const ctx = this.canvas.getContext('2d');\n       let data = this.content;\n       data.shift()\n       data.forEach(item => {\n         if( item.type ==='text' ){\n            const iText = item as ContentDataText\n            ctx.fillStyle = iText.canvasOptions.fillStyle || this.canvasFillStyle;\n            ctx.font = iText.canvasOptions.font || this.fontCanvas;\n            ctx.textAlign = iText.canvasOptions.textAlign as CanvasTextAlign || this.centerText as CanvasTextAlign;\n            ctx.fillText(item.any_string, item.x, item.y);\n         }\n         if( item.type ==='image' ){\n           const imgData = new Image();\n           imgData.src = item.any_string;\n           imgData.onload = function() {\n               ctx.drawImage(imgData, item.x, item.y,item.width,item.height);\n           };\n         }\n       });\n       \n  }\n\n}\n"],"version":3}