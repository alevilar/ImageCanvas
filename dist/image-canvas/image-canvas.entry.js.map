{"file":"image-canvas.entry.esm.js","mappings":";;AAAA,MAAM,cAAc,GAAG,sBAAsB;;MCOhC,WAAW;;;;;;2BAoBY,OAAO;sBAOb,gBAAgB;;sBAOtB,IAAI;;EAK1B,iBAAiB;IACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACpC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;IACzC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAChC,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;IACxB,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE;MAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;MACvB,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;MACzC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACzB,IAAI,CAAC,UAAU,EAAE,CAAA;KAClB,CAAC,CAAA;IACF,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;GACtB;EAGD,cAAc;IACZ,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAA;IAC5B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAA;IAC3B,OAAO,MAAM,CAAA;GACd;EAED,UAAU;IACL,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAA;IACzB,IAAI,CAAC,OAAO,CAAC,IAAI;MACf,IAAI,IAAI,CAAC,IAAI,KAAI,MAAM,EAAE;QACtB,MAAM,KAAK,GAAG,IAAuB,CAAA;QACrC,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,eAAe,CAAC;QACpD,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC;QACzC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;OAChD;MACD,IAAI,IAAI,CAAC,IAAI,KAAI,OAAO,EAAE;QACxB,MAAM,OAAO,GAAG,IAAI,KAAK,EAAE,CAAC;QAC5B,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;QAC9B,OAAO,CAAC,MAAM,GAAG;UACb,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAC,IAAI,CAAC,KAAK,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACjE,CAAC;OACH;KACF,CAAC,CAAC;GACP;;;;;;;","names":[],"sources":["./src/components/image-canvas/image-canvas.css?tag=image-canvas","./src/components/image-canvas/image-canvas.tsx"],"sourcesContent":[":host {\n  display: block;\n}","import { Component, Prop,State, Element } from '@stencil/core';\nimport { ContentDataImg, ContentDataText } from '../type';\n\n@Component({\n  tag: 'image-canvas',\n  styleUrl: 'image-canvas.css',\n})\nexport class ImageCanvas {\n\n  @Element() el: HTMLElement\n\n  @Prop() bgImg!: string \n  \n  /**\n   * With\n   */\n  @Prop() wCanvas: number\n\n  /**\n   * Height\n   */\n  @Prop() hCanvas: number\n\n\n  /**\n   * Canvas fillStroke\n   */\n  @Prop() canvasFillStyle: string = 'black'\n\n  /**\n   * canvas.font  string style\n   */\n\n\n  @Prop() fontCanvas:string = 'bold 12p Arial'\n  \n  /**\n   * canvas.content \n   */\n  @Prop() content: ContentDataText[]|ContentDataImg[]\n\n  @State() imgLoading = true;\n\n  private canvas: HTMLCanvasElement\n\n\n  componentWillLoad(){\n    this.canvas = this.__createCanvas();\n    console.info(\"el canvas es\", this.canvas)\n    this.el.appendChild(this.canvas)\n    const img = new Image();\n    img.addEventListener('load', () =>  {\n      this.imgLoading = false\n      const ctx = this.canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n      this.__loadData() \n    })\n    img.src = this.bgImg;\n  }\n\n\n  __createCanvas() {\n    const canvas = document.createElement('canvas')\n    canvas.height = this.hCanvas\n    canvas.width = this.wCanvas\n    return canvas\n  }\n\n  __loadData() {\n       const ctx = this.canvas.getContext('2d');\n       const data = this.content\n       data.forEach(item => {\n         if( item.type ==='text' ){\n            const iText = item as ContentDataText\n            ctx.fillStyle = iText.style || this.canvasFillStyle;\n            ctx.font = iText.font || this.fontCanvas;\n            ctx.fillText(item.any_string, item.x, item.y);\n         }\n         if( item.type ==='image' ){\n           const imgData = new Image();\n           imgData.src = item.any_string;\n           imgData.onload = function() {\n               ctx.drawImage(imgData, item.x, item.y,item.width,item.height);\n           };\n         }\n       });\n  }\n\n}\n"],"version":3}